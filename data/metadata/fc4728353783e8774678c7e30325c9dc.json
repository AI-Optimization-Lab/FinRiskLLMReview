{
  "id": 3930,
  "title": "Information Theoretic Cutting of a Cake",
  "abstract": "Cutting a cake is a metaphor for the problem of dividing a resource (cake) among several agents. The problem becomes non-trivial when the agents have different valuations for different parts of the cake (i.e., one agent may like chocolate, while the other may like cream). A fair division of the cake is one that takes into account the individual valuations of agents and partitions of the cake based on some fairness criterion. Fair division may he accomplished in a distributed or centralized way. Due to its natural and practical appeal, it has been a subject of study in economics. To the best of our knowledge, the role of partial information in fair division has not been studied so far from an information theoretic perspective. Given the diversity of problems in fair division, we consider certain specific (yet important) problems that capture different aspects of information exchange in a fair division setting. From the class of distributed algorithms, we consider the classical divide and choose (DC) problem between two parties. Here, we study the effect of partial spying and voluntarily sharing of information in both one-shot and asymptotic scenarios. Furthermore, we consider implicit information transmission through actions for the repeated version of the problem. While identifying subgame perfect Nash equilibrium in repeated games with incomplete information on both sides is very difficult in general, for the special case of division of two items, we find a more stringent trembling hand perfect equilibrium. Next, from the class of centralized algorithms, we consider the Adjusted Winner (AW) algorithm between two players Alice and Bob. Brams and Taylor showed that if Alice can fully spy on Bob, she can trick the algorithm. We consider the same setup when partial spying is allowed and study the growth rate of Alice's utility per spying bit. Via a transformation from AW to DC, it is shown that the problem reduces to the one studied earlier for DC. However, if Alice is forced to only spy certain simple structured functions of Bob's valuation, an upper bound on the growth rate of utility per spying bit is derived. This bound is shown to be tight in some cases. We also consider a centralized algorithm for maximizing the overall welfare of the agents under the Nash collective utility function (CUF). This corresponds to a clustering problem. By observing a link between this problem and the portfolio selection problem in stock markets, we provide an upper hound on the increase of the Nash CUF for a clustering refinement.",
  "year": 2017,
  "source": "WOS",
  "area": "portfolio",
  "method": "machine learning",
  "keywords": [
    "machine learning",
    "supervised learning",
    "unsupervised learning",
    "reinforcement learning",
    "semi-supervised learning",
    "active learning",
    "classification",
    "regression",
    "PCA",
    "support vector machine",
    "SVM",
    "decision tree",
    "clustering",
    "principal components analysis",
    "manifold learning",
    "feature learning",
    "feature representation",
    "neural network",
    "deep learning",
    "representation learning",
    "backpropagation",
    "BP",
    "rectified linear unit",
    "ReLU",
    "sigmoid",
    "tanh",
    "hidden layer",
    "convolutional neural network",
    "CNN",
    "recurrent neural network",
    "long short-term memory",
    "LSTM",
    "sequence-to-sequence learning",
    "seq2seq",
    "encoder-decoder",
    "autoencoder",
    "denoising autoencoder",
    "deep belief network",
    "DBM",
    "restricted Boltzmann machine",
    "dropout regularization",
    "unsupervised pre-train",
    "memory network",
    "attention mechanism",
    "Large Language Model",
    "LLM",
    "In-context Learning",
    "Instruction Tuning",
    "Chain-of-Thought",
    "Few-shot Learning",
    "Zero-shot Learning",
    "Long Context Modeling",
    "Tool Manipulation",
    "Tool-augmented Model",
    "Memory Augmented Model",
    "ChatGPT",
    "GPT-4",
    "LLaMA"
  ],
  "cache_key": "fc4728353783e8774678c7e30325c9dc",
  "timestamp": "2025-05-15T01:22:11.948840"
}